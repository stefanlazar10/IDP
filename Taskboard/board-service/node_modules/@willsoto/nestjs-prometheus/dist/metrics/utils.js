"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrCreateMetric = getOrCreateMetric;
exports.getToken = getToken;
const client = require("prom-client");
/**
 * @internal
 */
function getOrCreateMetric(type, options, prometheusOptions) {
    const opts = {
        ...options,
        name: (prometheusOptions === null || prometheusOptions === void 0 ? void 0 : prometheusOptions.customMetricPrefix)
            ? prometheusOptions.customMetricPrefix.concat("_", options.name)
            : options.name,
    };
    const existingMetric = client.register.getSingleMetric(opts.name);
    if (existingMetric) {
        return existingMetric;
    }
    switch (type) {
        case "Gauge":
            return new client.Gauge(opts);
        case "Counter":
            return new client.Counter(opts);
        case "Histogram":
            return new client.Histogram(opts);
        case "Summary":
            return new client.Summary(opts);
        default:
            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
            throw new Error(`Unknown type: ${type}`);
    }
}
/**
 * @public
 */
function getToken(name) {
    return `PROM_METRIC_${name.toUpperCase()}`;
}
//# sourceMappingURL=utils.js.map