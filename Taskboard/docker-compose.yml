version: '3.8'

services:
  # Postgres principal
  db:
    image: postgres:16
    deploy:
      replicas: 1
    restart: always
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - pgdata:/var/lib/postgresql/data

  # Adminer (utilitar DB)
  adminer:
    image: adminer
    deploy:
      replicas: 1
    restart: always
    ports:
      - "8081:8080"
    depends_on:
      - db

  # Portainer (management Docker)
  portainer:
    image: portainer/portainer-ce
    deploy:
      mode: global 
    restart: always
    command: -H unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - "9000:9000"

  # Baza de date pentru Kong
  kong-db:
    image: postgres:16
    deploy:
      replicas: 1
    restart: always
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    volumes:
      - kong_data:/var/lib/postgresql/data

  # Migra»õiile Kong (bootstrap schema)
  kong-migrations:
    image: kong:3
    deploy:
      replicas: 1
    depends_on:
      - kong-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    entrypoint:
      - sh
      - -c
      - |
        echo "Waiting for kong-db..."
        until pg_isready -h kong-db -p 5432; do
          sleep 1
        done
        kong migrations bootstrap --v

  # Gateway-ul Kong
  kong:
    image: kong:3
    deploy:
      replicas: 1
    restart: always
    depends_on:
      - kong-db
      - kong-migrations
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"

  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    restart: always
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: secret
    ports:
      - "3001:3000"
    depends_on:
      - prometheus    

  # Serviciile tale NestJS
  auth-service:
    build: ./auth-service
    deploy:
      replicas: 2
    env_file:
      - ./.env
    depends_on:
      - db

  board-service:
    build: ./board-service
    deploy:
      replicas: 2
    env_file:
      - ./.env
    depends_on:
      - db

  task-service:
    build: ./task-service
    deploy:
      replicas: 2
    env_file:
      - ./.env
    depends_on:
      - db


volumes:
  pgdata:
  portainer_data:
  kong_data:
